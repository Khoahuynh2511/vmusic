/**
 * ========================================
 * MAIN APP MODULE - ·ª®ng d·ª•ng Music Player
 * ========================================
 * Ch·ª©c nƒÉng: Kh·ªüi t·∫°o v√† qu·∫£n l√Ω to√†n b·ªô ·ª©ng d·ª•ng
 * - K·∫øt n·ªëi t·∫•t c·∫£ modules
 * - Global event handlers
 * - App lifecycle management
 * - Notification system
 */

class MusicPlayerApp {
    constructor() {
        this.isInitialized = false;
        this.modules = {};
        
        // Global notification function
        window.showNotification = this.showNotification.bind(this);
        
        this.init();
    }

    /**
     * Kh·ªüi t·∫°o ·ª©ng d·ª•ng
     */
    async init() {
        try {
            console.log('üöÄ ƒêang kh·ªüi t·∫°o Music Player App...');
            
            // Hi·ªán loading screen
            this.showLoadingScreen();
            
            // ƒê·ª£i DOM loaded
            await this.waitForDOM();
            
            // Kh·ªüi t·∫°o c√°c modules theo th·ª© t·ª±
            await this.initializeModules();
            
            // K·∫øt n·ªëi c√°c modules
            this.connectModules();
            
            // Setup global event listeners
            this.setupGlobalEvents();
            
            // Load tr·∫°ng th√°i ƒë√£ l∆∞u
            await this.loadSavedState();
            
            // ·∫®n loading screen
            this.hideLoadingScreen();
            
            // Ho√†n th√†nh kh·ªüi t·∫°o
            this.isInitialized = true;
            
            console.log('‚úÖ Music Player App ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!');
            this.showNotification('üéµ Music Player s·∫µn s√†ng s·ª≠ d·ª•ng!', 'success');
            
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng:', error);
            this.showError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng t·∫£i l·∫°i trang.');
        }
    }

    /**
     * ƒê·ª£i DOM loaded
     */
    waitForDOM() {
        return new Promise((resolve) => {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', resolve);
            } else {
                resolve();
            }
        });
    }

    /**
     * Kh·ªüi t·∫°o c√°c modules
     */
    async initializeModules() {
        console.log('üì¶ ƒêang kh·ªüi t·∫°o c√°c modules...');
        
        // 1. Storage Module (c·∫ßn kh·ªüi t·∫°o ƒë·∫ßu ti√™n)
        this.modules.storage = new Storage();
        
        // 2. Theme Manager
        this.modules.theme = new ThemeManager(this.modules.storage);
        
        // 3. Playlist Manager
        this.modules.playlist = new PlaylistManager(this.modules.storage);
        
        // 4. Music Player
        this.modules.player = new MusicPlayer(this.modules.storage);
        
        // 5. Sleep Timer
        this.modules.timer = new SleepTimer(this.modules.player);
        
        // G√°n v√†o window ƒë·ªÉ c√°c modules kh√°c truy c·∫≠p
        window.storage = this.modules.storage;
        window.playlist = this.modules.playlist;
        window.player = this.modules.player;
        window.theme = this.modules.theme;
        window.timer = this.modules.timer;
        
        console.log('‚úÖ T·∫•t c·∫£ modules ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }

    /**
     * K·∫øt n·ªëi c√°c modules v·ªõi nhau
     */
    connectModules() {
        console.log('üîó ƒêang k·∫øt n·ªëi c√°c modules...');
        
        // K·∫øt n·ªëi Player v·ªõi Playlist
        if (this.modules.playlist.songs.length > 0) {
            // Load b√†i h√°t ƒë·∫ßu ti√™n n·∫øu c√≥
            const savedIndex = this.modules.storage.loadCurrentIndex();
            if (savedIndex < this.modules.playlist.songs.length) {
                this.modules.playlist.updateActiveItem(savedIndex);
            }
        }
        
        console.log('‚úÖ C√°c modules ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi');
    }

    /**
     * Setup global event listeners
     */
    setupGlobalEvents() {
        // Theme change events
        document.addEventListener('themechange', (e) => {
            console.log(`üé® Theme ƒë√£ thay ƒë·ªïi: ${e.detail.oldTheme} ‚Üí ${e.detail.newTheme}`);
        });

        // Music play/pause events
        document.addEventListener('musicplay', (e) => {
            this.onMusicPlay(e.detail);
        });

        document.addEventListener('musicpause', (e) => {
            this.onMusicPause(e.detail);
        });

        // Sleep timer events
        document.addEventListener('sleeptimerexpired', (e) => {
            console.log('üò¥ Sleep timer ƒë√£ h·∫øt h·∫°n');
        });

        // Window events
        window.addEventListener('beforeunload', () => {
            this.onBeforeUnload();
        });

        // Visibility change (tab switching)
        document.addEventListener('visibilitychange', () => {
            this.onVisibilityChange();
        });

        // Error handling
        window.addEventListener('error', (e) => {
            console.error('üö® Global Error:', e.error);
        });

        window.addEventListener('unhandledrejection', (e) => {
            console.error('üö® Unhandled Promise Rejection:', e.reason);
        });

        // Keyboard shortcuts to√†n c·ª•c
        this.setupGlobalKeyboardShortcuts();
        
        console.log('‚å®Ô∏è Global event listeners ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p');
    }

    /**
     * Setup keyboard shortcuts to√†n c·ª•c
     */
    setupGlobalKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Media keys support
            if (e.target.tagName.toLowerCase() === 'input') return;

            // Ph√≠m t·∫Øt to√†n c·ª•c v·ªõi Alt
            if (e.altKey) {
                switch (e.key) {
                    case 'h':
                        e.preventDefault();
                        this.showHelpModal();
                        break;
                    case 'i':
                        e.preventDefault();
                        this.showAppInfo();
                        break;
                }
            }

            // F key functions
            switch (e.key) {
                case 'F1':
                    e.preventDefault();
                    this.showHelpModal();
                    break;
            }
        });
    }

    /**
     * Load tr·∫°ng th√°i ƒë√£ l∆∞u
     */
    async loadSavedState() {
        console.log('üíæ ƒêang t·∫£i tr·∫°ng th√°i ƒë√£ l∆∞u...');
        
        try {
            // Load current song n·∫øu c√≥
            const savedSong = this.modules.storage.loadCurrentSong();
            const savedIndex = this.modules.storage.loadCurrentIndex();
            
            if (savedSong && this.modules.playlist.songs[savedIndex]) {
                this.modules.playlist.updateActiveItem(savedIndex);
                // Kh√¥ng t·ª± ƒë·ªông ph√°t nh·∫°c khi load
            }
            
            console.log('‚úÖ Tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c');
        } catch (error) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ kh√¥i ph·ª•c tr·∫°ng th√°i:', error);
        }
    }

    /**
     * X·ª≠ l√Ω khi nh·∫°c b·∫Øt ƒë·∫ßu ph√°t
     */
    onMusicPlay(detail) {
        // C·∫≠p nh·∫≠t document title
        if (detail.song) {
            document.title = `üéµ ${detail.song.title} - ${detail.song.artist} | Music Player`;
        }

        // C·∫≠p nh·∫≠t favicon (n·∫øu c√≥)
        this.updateFavicon('üéµ');
    }

    /**
     * X·ª≠ l√Ω khi nh·∫°c d·ª´ng
     */
    onMusicPause(detail) {
        document.title = 'üéµ Music Player - Tr√¨nh ph√°t nh·∫°c Online';
        this.updateFavicon('‚è∏Ô∏è');
    }

    /**
     * C·∫≠p nh·∫≠t favicon
     */
    updateFavicon(emoji) {
        const favicon = document.querySelector('link[rel="icon"]');
        if (favicon) {
            favicon.href = `data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>${emoji}</text></svg>`;
        }
    }

    /**
     * X·ª≠ l√Ω khi tab thay ƒë·ªïi visibility
     */
    onVisibilityChange() {
        if (document.hidden) {
            // Tab ·∫©n
            console.log('üëÅÔ∏è Tab ƒë√£ b·ªã ·∫©n');
        } else {
            // Tab hi·ªán
            console.log('üëÅÔ∏è Tab ƒë√£ hi·ªán l·∫°i');
        }
    }

    /**
     * X·ª≠ l√Ω tr∆∞·ªõc khi ƒë√≥ng trang
     */
    onBeforeUnload() {
        // L∆∞u tr·∫°ng th√°i cu·ªëi c√πng
        if (this.modules.player) {
            const playerInfo = this.modules.player.getPlayerInfo();
            this.modules.storage.saveCurrentIndex(playerInfo.currentIndex);
            this.modules.storage.saveVolume(playerInfo.volume);
        }
        
        console.log('üíæ ƒê√£ l∆∞u tr·∫°ng th√°i tr∆∞·ªõc khi ƒë√≥ng');
    }

    /**
     * Hi·ªán loading screen
     */
    showLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.style.display = 'flex';
        }
    }

    /**
     * ·∫®n loading screen
     */
    hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            setTimeout(() => {
                loadingScreen.classList.add('fade-out');
                setTimeout(() => {
                    loadingScreen.style.display = 'none';
                }, 500);
            }, 1000); // Hi·ªán loading √≠t nh·∫•t 1 gi√¢y
        }
    }

    /**
     * Hi·ªán th√¥ng b√°o toast
     */
    showNotification(message, type = 'info') {
        const toastElement = document.getElementById('notification-toast');
        const toastBody = document.getElementById('toast-message');
        
        if (!toastElement || !toastBody) {
            console.log(`üì¢ ${message}`);
            return;
        }

        // Clear previous classes
        toastElement.className = 'toast';
        
        // Set message
        toastBody.textContent = message;
        
        // Add appropriate classes
        switch (type) {
            case 'success':
                toastElement.classList.add('bg-success', 'text-white');
                break;
            case 'error':
                toastElement.classList.add('bg-danger', 'text-white');
                break;
            case 'warning':
                toastElement.classList.add('bg-warning', 'text-dark');
                break;
            default:
                toastElement.classList.add('bg-info', 'text-white');
        }
        
        // Show toast
        const toast = new bootstrap.Toast(toastElement, {
            delay: type === 'error' ? 5000 : 3000
        });
        toast.show();
    }

    /**
     * Hi·ªán l·ªói
     */
    showError(message) {
        this.showNotification(message, 'error');
        console.error('‚ùå App Error:', message);
    }

    /**
     * Hi·ªán modal help
     */
    showHelpModal() {
        const helpContent = `
            <div class="row">
                <div class="col-md-6">
                    <h6><i class="bi bi-keyboard"></i> Ph√≠m t·∫Øt</h6>
                    <ul class="list-unstyled small">
                        <li><kbd>Space</kbd> - Ph√°t/D·ª´ng nh·∫°c</li>
                        <li><kbd>‚Üê</kbd> - B√†i tr∆∞·ªõc</li>
                        <li><kbd>‚Üí</kbd> - B√†i ti·∫øp</li>
                        <li><kbd>‚Üë</kbd> - TƒÉng √¢m l∆∞·ª£ng</li>
                        <li><kbd>‚Üì</kbd> - Gi·∫£m √¢m l∆∞·ª£ng</li>
                        <li><kbd>M</kbd> - T·∫Øt/B·∫≠t ti·∫øng</li>
                        <li><kbd>Ctrl+S</kbd> - Toggle Shuffle</li>
                        <li><kbd>Ctrl+R</kbd> - Toggle Repeat</li>
                        <li><kbd>Ctrl+F</kbd> - T√¨m ki·∫øm</li>
                        <li><kbd>F1</kbd> - Hi·ªán help</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <h6><i class="bi bi-gear"></i> T√≠nh nƒÉng</h6>
                    <ul class="list-unstyled small">
                        <li>üéµ Ph√°t nh·∫°c v·ªõi ƒë·∫ßy ƒë·ªß controls</li>
                        <li>üîÄ Shuffle & Repeat modes</li>
                        <li>üîç T√¨m ki·∫øm b√†i h√°t</li>
                        <li>üåô Dark/Light mode</li>
                        <li>‚è∞ Sleep timer</li>
                        <li>üíæ L∆∞u playlist t·ª± ƒë·ªông</li>
                        <li>üì± Responsive design</li>
                        <li>‚å®Ô∏è Keyboard shortcuts</li>
                    </ul>
                </div>
            </div>
        `;

        this.showModal('H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng', helpContent);
    }

    /**
     * Hi·ªán th√¥ng tin app
     */
    showAppInfo() {
        const appInfo = `
            <div class="text-center">
                <h4>üéµ Music Player</h4>
                <p class="text-muted">Tr√¨nh ph√°t nh·∫°c tr·ª±c tuy·∫øn hi·ªán ƒë·∫°i</p>
                
                <div class="row mt-4">
                    <div class="col-6">
                        <h6>Phi√™n b·∫£n</h6>
                        <p>1.0.0</p>
                    </div>
                    <div class="col-6">
                        <h6>Ng√†y ph√°t h√†nh</h6>
                        <p>${new Date().toLocaleDateString('vi-VN')}</p>
                    </div>
                </div>
                
                <div class="mt-3">
                    <h6>C√¥ng ngh·ªá s·ª≠ d·ª•ng</h6>
                    <p class="small">HTML5, CSS3, JavaScript ES6+, Bootstrap 5, Web Audio API</p>
                </div>
                
                <div class="mt-3">
                    <small class="text-muted">
                        ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è b·ªüi k·ªπ s∆∞ ph·∫ßn m·ªÅm k·ª≥ c·ª±u
                    </small>
                </div>
            </div>
        `;

        this.showModal('Th√¥ng tin ·ª©ng d·ª•ng', appInfo);
    }

    /**
     * Hi·ªán modal ƒë·ªông
     */
    showModal(title, content) {
        // T·∫°o modal ƒë·ªông
        const modalId = 'dynamicModal';
        let modalElement = document.getElementById(modalId);
        
        if (!modalElement) {
            modalElement = document.createElement('div');
            modalElement.id = modalId;
            modalElement.className = 'modal fade';
            modalElement.tabIndex = -1;
            document.body.appendChild(modalElement);
        }

        modalElement.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">${title}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        ${content}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ƒê√≥ng</button>
                    </div>
                </div>
            </div>
        `;

        const modal = new bootstrap.Modal(modalElement);
        modal.show();
    }

    /**
     * L·∫•y th√¥ng tin app
     */
    getAppInfo() {
        return {
            version: '1.0.0',
            initialized: this.isInitialized,
            modules: Object.keys(this.modules),
            uptime: Date.now() - (this.startTime || Date.now()),
            storage: this.modules.storage?.getStorageInfo() || null,
            player: this.modules.player?.getPlayerInfo() || null,
            playlist: this.modules.playlist?.getPlaylistInfo() || null,
            theme: this.modules.theme?.getCurrentTheme() || null
        };
    }

    /**
     * Restart ·ª©ng d·ª•ng
     */
    restart() {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng?')) {
            location.reload();
        }
    }

    /**
     * H·ªßy ·ª©ng d·ª•ng
     */
    destroy() {
        console.log('üßπ ƒêang h·ªßy Music Player App...');
        
        // H·ªßy t·∫•t c·∫£ modules
        Object.values(this.modules).forEach(module => {
            if (module && typeof module.destroy === 'function') {
                module.destroy();
            }
        });
        
        // Clear global references
        delete window.storage;
        delete window.playlist;
        delete window.player;
        delete window.theme;
        delete window.timer;
        delete window.showNotification;
        
        console.log('‚úÖ Music Player App ƒë√£ ƒë∆∞·ª£c h·ªßy');
    }
}

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi trang load
document.addEventListener('DOMContentLoaded', () => {
    window.app = new MusicPlayerApp();
});

// Export ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ console
window.MusicPlayerApp = MusicPlayerApp; 